// 공통성과 가변성의 분리

// 변하지 않는 것(공통성, 전체 알고리즘)에서 변해야 하는 것(가변성, 정책)
// 을 분리하는 4가지 기술

// 1. 멤버함수에서 변해야 하는 정책
//    A. 변하는 것을 가상함수로 => 자식 클래스를 만들어서 재정의
//                            => Template Method Pattern
//                            => 정책의 재사용 X / 실행 시간에 변경 X
//    B. 변하는 것을 인터페이스 기반 다른 클래스로
//                            => 정책의 재사용성 증가
//                            => 전략(Strategy) 패턴
//   
//   C. 실행 시간에 정책을 분리할 필요가 없다.
//     => 변하는 것을 템플릿 인자로 분리한다.(단위 전략)
//     => 속도가 빠르다!
//     => 실행 시간에 교체가 불가능하다.

// 2. 일반함수에서 변해야 하는 정책
//    => 변하는 것을 함수 인자(함수 포인터)로 분리한다.
//    => 성능을 고려한다면, 함수 포인터 대신 함수 객체 사용. 단 코드 메모리 증가

https://github.com/ourguide/DesignPattern